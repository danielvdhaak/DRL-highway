/*
 * This code is part of DRL-Highway by Daniel (2020)
 * 
 */

using System;
using UnityEngine;

/// <summary>
/// A pseudo-random number generator (PRNG).
/// </summary>
public class RandomNumber
{
    System.Random rnd = new System.Random();

    /// <summary>
    /// Returns a random uniformly distributed float number on the interval [0, 1], i.e. including 0 and 1.
    /// </summary>
    public float Uniform()
    {
        return UnityEngine.Random.Range(0.0f, 1.0f);
    }

    /// <summary>
    /// Returns a random uniformly distributed float number on the interval [0, max], i.e. including 0 and max.
    /// </summary>
    public float Uniform(float max)
    {
        return UnityEngine.Random.Range(0.0f, max);
    }

    /// <summary>
    /// Returns a random uniformly distributed float number on the interval [min, max], i.e. including min and max.
    /// </summary>
    public float Uniform(float min, float max)
    {
        return UnityEngine.Random.Range(min, max);
    }

    /// <summary>
    /// Returns a random uniformly distributed 32-bit signed integer on the interval [0, max], i.e. including 0 and max.
    /// </summary>
    public int Next(int max)
    {
        return rnd.Next(max + 1);
    }

    /// <summary>
    /// Returns a random uniformly distributed 32-bit signed integer on the interval [min, max], i.e. including min and max.
    /// </summary>
    public int Next(int min, int max)
    {
        return rnd.Next(min, max + 1);
    }

    /// <summary>
    /// Returns a random standard normally distributed float number.
    /// The number is generated by the Box-Muller method.
    /// </summary>
    public float Gaussian()
    {
        float U1 = 1 - (float)rnd.NextDouble();
        float U2 = 1 - (float)rnd.NextDouble();

        return Mathf.Sqrt(-2.0f * Mathf.Log(U1)) * Mathf.Cos(2.0f * Mathf.PI * U2);
    }

    /// <summary>
    /// Returns a random normally distributed float number with a mean and standard deviation std.
    /// The number is generated by the Box-Muller method.
    /// </summary>
    public float Gaussian(float mean, float std)
    {
        return mean + std * Gaussian();
    }

    /// <summary>
    /// Returns a random standard exponentially distributed float number with a mean and minimum.
    /// </summary>
    public float Exponential()
    {
        float R = 1 - (float)rnd.NextDouble();

        return -Mathf.Log(R);
    }

    /// <summary>
    /// Returns a random shifted exponentially distributed float number with a mean and minimum.
    /// </summary>
    public float Exponential(float mean, float min)
    {
        return (mean - min) * Exponential() + min;
    }

    /// <summary>
    /// Return a random float number on the interval [0, 1] generated by a 2D Perlin noise.
    /// </summary>
    public float Perlin()
    {
        return Mathf.PerlinNoise(Uniform(), Uniform());
    }
}
